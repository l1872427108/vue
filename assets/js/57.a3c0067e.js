(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{454:function(t,a,s){"use strict";s.r(a);var n=s(56),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"为什么data属性是一个函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么data属性是一个函数"}},[t._v("#")]),t._v(" 为什么data属性是一个函数")]),t._v(" "),s("h3",{attrs:{id:"实例和组件定义data的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实例和组件定义data的区别"}},[t._v("#")]),t._v(" 实例和组件定义data的区别")]),t._v(" "),s("h3",{attrs:{id:"组件data定义函数与对象的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组件data定义函数与对象的区别"}},[t._v("#")]),t._v(" 组件data定义函数与对象的区别")]),t._v(" "),s("p",[t._v("组件 data 必须是一个函数。")]),t._v(" "),s("p",[t._v("在我们定义好一个组件的时候，vue最终都会通过 Vue.extend() 构成组件实例.")]),t._v(" "),s("p",[t._v("产生这样的原因是两者公用了一个内存地址。")]),t._v(" "),s("p",[t._v("如果采用函数的形式，则不会出现这样的情况。函数返回的对象内存地址并不相同")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Component")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Component")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("data")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("count")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[t._v("修改组件的值，另一个不会收到影响")]),t._v(" "),s("p",[t._v("Vue组件可能会有多个实例，采用函数返回一个全新的 data 形式，使每个实例对象的数据不会影响对象数据的污染。")]),t._v(" "),s("h3",{attrs:{id:"原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),s("p",[t._v("组件在创建的时候，会进行选项的合并\nmerheOptions 进行选项合并")]),t._v(" "),s("p",[t._v("若data类型不是function，则出现警告提示")]),t._v(" "),s("p",[t._v("根实例对象data可以是对象也可以是函数（根实例是单例），不会产生数据污染情况")]),t._v(" "),s("p",[t._v("组件实例对象data必须为函数，目的是为了防止多个组件实例对象之间共用一个data，产生数据污染。采用函数的形式，initData时会将其作为工厂函数都会返回全新data对象")])])}),[],!1,null,null,null);a.default=e.exports}}]);