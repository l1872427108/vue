(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{463:function(v,_,e){"use strict";e.r(_);var a=e(56),t=Object(a.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"对vue的理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对vue的理解"}},[v._v("#")]),v._v(" 对Vue的理解")]),v._v(" "),e("h3",{attrs:{id:"追溯历史"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#追溯历史"}},[v._v("#")]),v._v(" 追溯历史")]),v._v(" "),e("ul",[e("li",[v._v("石器时代")]),v._v(" "),e("li",[v._v("文明时代")]),v._v(" "),e("li",[v._v("工业革命时代")]),v._v(" "),e("li",[v._v("百花齐放时代")])]),v._v(" "),e("h3",{attrs:{id:"石器时代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#石器时代"}},[v._v("#")]),v._v(" 石器时代")]),v._v(" "),e("p",[v._v("最早的网页时没有数据库的，就是相当于一份报纸，直到 CGI 技术的出现通过运行一小段代码与数据库或文件系统进行交互。")]),v._v(" "),e("h3",{attrs:{id:"文明时代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#文明时代"}},[v._v("#")]),v._v(" 文明时代")]),v._v(" "),e("p",[v._v("ASP，JSP 最早是在 2005 年，取代了 CGI，增强了 WEB 与服务端的交互的安全性。")]),v._v(" "),e("p",[v._v("不好的地方就是不灵活，JSP 在服务端执行，返回该客户端的是一个 HTML 文本。获取的数据、内容的加载，都是服务端返回渲染完成之后的 DOM。")]),v._v(" "),e("p",[v._v("这一年， Ajax 起飞。")]),v._v(" "),e("h3",{attrs:{id:"工业革命时代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工业革命时代"}},[v._v("#")]),v._v(" 工业革命时代")]),v._v(" "),e("p",[v._v("移动设备的普及，移动端设备的普及，Jquery 的出现，SPA 但页面应用的雏形， 一些前端框架的出现。但是但单面不好走，SEO 的问题，SPA 过多的页面、复杂场景下 View 的绑定。都没有很好的处理。")]),v._v(" "),e("h3",{attrs:{id:"百花齐放时代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#百花齐放时代"}},[v._v("#")]),v._v(" 百花齐放时代")]),v._v(" "),e("p",[v._v("这几年的飞速发展，节约了开发人员大量的精力、降低了开发者和开发过程的门槛，极大提升了开发效率和迭代速度")]),v._v(" "),e("p",[v._v("Web的历史发展，可以看出来 Web 技术的变化之大与快，每一种新的技术出来都是一些特定场景解决方案。")]),v._v(" "),e("h3",{attrs:{id:"vue是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue是什么"}},[v._v("#")]),v._v(" vue是什么")]),v._v(" "),e("p",[v._v("Vue是一个用于创建用户界面的开源JavaScript框架，也是一个创建单页应用的 Web 应用框架。Vue 关注的核心是 MVC 模式中的视图层，同时，它能方便地获取数据更新，并通过组件内部特点的方法实现视图与模型的交互。")]),v._v(" "),e("h3",{attrs:{id:"vue核心特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue核心特性"}},[v._v("#")]),v._v(" Vue核心特性")]),v._v(" "),e("h4",{attrs:{id:"数据驱动-mvvm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据驱动-mvvm"}},[v._v("#")]),v._v(" 数据驱动 MVVM")]),v._v(" "),e("p",[v._v("MVVM表示的是 Model-View-ViewModel")]),v._v(" "),e("ul",[e("li",[v._v("Model: 模型层，用来存储数据（data）以及负责处理业务逻辑以及和服务器端进行交互。")]),v._v(" "),e("li",[v._v("View: 视图层，负责将数据模型转化为UI展示出来。")]),v._v(" "),e("li",[v._v("ViewModel: 视图模型层，用来连接 Model 和 View，是Model和View之间的通信桥梁, 在 Vue 中是 vue 实例。")])]),v._v(" "),e("h4",{attrs:{id:"组件化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件化"}},[v._v("#")]),v._v(" 组件化")]),v._v(" "),e("p",[v._v("把图形、非图形的各种逻辑均抽象为一个统一的概念（组件）来实现开发的模式，在 Vue 中每一个 .vue 文件都可以视为一个组件。")]),v._v(" "),e("ol",[e("li",[e("p",[v._v("降低整个系统的耦合度。 在保持接口不变的情况下，我们可以替换不同的组件快速完成需求。")])]),v._v(" "),e("li",[e("p",[v._v("调试方便，出现问题，可以很快排出组件，或者根据组件快速定位，每个组件之间低耦合，职责单一，逻辑会比分析整个系统要简单。")])]),v._v(" "),e("li",[e("p",[v._v("提高维护性，每个组件的职责单一，组件在系统被复用，所以对代码优化后获得整体升级。")])])]),v._v(" "),e("h4",{attrs:{id:"指令系统。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#指令系统。"}},[v._v("#")]),v._v(" 指令系统。")]),v._v(" "),e("p",[v._v("带有 v- 前缀的特殊属性。当表达式的值改变时，将其产生的连带影响，作用于 DOM.")]),v._v(" "),e("ul",[e("li",[v._v("v-if")]),v._v(" "),e("li",[v._v("v-for")]),v._v(" "),e("li",[v._v("v-bind")]),v._v(" "),e("li",[v._v("v-on")]),v._v(" "),e("li",[v._v("v-model")])]),v._v(" "),e("p",[v._v("没有指令之前，我们需要获取到 DOM 来后进行操作。")]),v._v(" "),e("h3",{attrs:{id:"vue-跟传统开发的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-跟传统开发的区别"}},[v._v("#")]),v._v(" Vue 跟传统开发的区别")]),v._v(" "),e("p",[v._v("没有落地使用场景的革命不是好革命，就以一个高频的应用场景来：注册登录这个需求。")]),v._v(" "),e("p",[v._v("用 jquery 来实现的思路就是选择流程 dom 对象，点击按钮隐藏当前活动流程 dom 对象，显示下一流程 dom 对象。")]),v._v(" "),e("p",[v._v("用 vue来实现，vue基本不操作 dom 节点，双向绑定使 dom 节点跟试图绑定后，通过修改变量的值控制 dom 节点的属性。视图层使用一变量控制dom节点显示与否，点击按钮则改变该变。")]),v._v(" "),e("p",[v._v("Vue所有的界面事件，都是只去操作数据的，Jquery 操作 DOM。")]),v._v(" "),e("p",[v._v("Vue所有的界面变动，都是根据数据自动绑定出来的，Jquery操作DOM。")]),v._v(" "),e("h3",{attrs:{id:"vue和react对比"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue和react对比"}},[v._v("#")]),v._v(" Vue和React对比")]),v._v(" "),e("p",[v._v("相同点：")]),v._v(" "),e("ul",[e("li",[v._v("都有组件化思想。")]),v._v(" "),e("li",[v._v("都支持服务器端渲染")]),v._v(" "),e("li",[v._v("都有虚拟DOM")]),v._v(" "),e("li",[v._v("数据驱动视图")]),v._v(" "),e("li",[v._v("都有支持native的方案: Vue 的 weex、 React 的 React native")]),v._v(" "),e("li",[v._v("都有自己的构建工具：Vue 的 vue-cli、React 的 Create React App")])]),v._v(" "),e("p",[v._v("区别：")]),v._v(" "),e("ul",[e("li",[v._v("数据变化的实现原理不同。react 使用的是不可变数据，而Vue使用的是可变的数据。")]),v._v(" "),e("li",[v._v("组件化通信不同。react中通过使用回调函数来进行通信，而 Vue 中子组件向父组件传递消息方式：事件和回调函数。")]),v._v(" "),e("li",[v._v("diff 算法不同：react 主要使用 diff 队列保存需要更新哪些 DOM，得到 patch 树，然后统一操作批量更新DOM。 Vue 使用双向指针，边对比，边更新DOM。")])]),v._v(" "),e("h3",{attrs:{id:"vue的优点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue的优点"}},[v._v("#")]),v._v(" Vue的优点")]),v._v(" "),e("ul",[e("li",[v._v("轻量级框架：只关注视图层，是一个构建数据的视图集合，大小只有几十kb。")]),v._v(" "),e("li",[v._v("简单易学：国人开发，中文文档，不存在语言障碍，易于理解和学习。")]),v._v(" "),e("li",[v._v("双向数据绑定：保留了 angular 的特点，在数据操作方面更为简单；")]),v._v(" "),e("li",[v._v("组件化：保留了 react 的优点，实现了 html 的封装和重用，在构 建单页面应用方面有着独特的优势")]),v._v(" "),e("li",[v._v("视图，数据，结构分离：使数据的更改更为简单，不需要进行逻辑代 码的修改，只需要操作数据就能完成相关操作；")]),v._v(" "),e("li",[v._v("虚拟DOM：dom操作是非常消耗性能的，不再使用原生的 dom 操作节点，极大解放dom操作，但具体操作的还是 dom 不过是换了另一 种方式；")]),v._v(" "),e("li",[v._v("运行速度更快： 相比较于 react 而言，同样是操作虚拟 dom，就性 能而言， vue 存在很大的优势")])])])}),[],!1,null,null,null);_.default=t.exports}}]);