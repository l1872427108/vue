(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{428:function(e,t,v){"use strict";v.r(t);var _=v(56),a=Object(_.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"vue的生命周期"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue的生命周期"}},[e._v("#")]),e._v(" Vue的生命周期")]),e._v(" "),v("p",[e._v("Vue 实例由一个完整的生命周期，从开始创建、初始化数据、 编译模版、挂载 Dom -> 渲染、更新 -> 渲染、卸载 等⼀系列过程， 称这是 Vue 的⽣命周期")]),e._v(" "),v("ol",[v("li",[v("p",[e._v("beforeCreate（创建前）：数据观测和初始化事件还未开始，此时 data 的响应式追踪、event/watcher 都还没有被设置，也就是说不 能访问到 data、computed、watch、methods 上的方法和数据。")])]),e._v(" "),v("li",[v("p",[e._v("created（创建后）:实例创建完成，实例上配置的 options 包 括 data、computed、watch、methods 等都配置完成，但是此时渲染 得节点还未挂载到 DOM，所以不能访问到 $el 属性")])]),e._v(" "),v("li",[v("p",[e._v("beforeMount（挂载前）：在挂载开始之前被调用，相关的 render 函数首次被调用。实例已完成以下的配置：编译模板，把 data 里面 的数据和模板生成 html。此时还没有挂载 html 到页面上。")])]),e._v(" "),v("li",[v("p",[e._v("mounted（挂载后）: 在 el 被新创建的 vm.$el 替换，并挂载到实 例上去之后调用。实例已完成以下的配置：用上面编译好的 html 内 容替换 el 属性指向的 DOM 对象。完成模板中的 html 渲染到 html 页 面中。此过程中进行 ajax 交互")])]),e._v(" "),v("li",[v("p",[e._v("beforeUpdate（更新前）：响应式数据更新时调用，此时虽然响应 式数据更新了，但是对应的真实 DOM 还没有被渲染")])]),e._v(" "),v("li",[v("p",[e._v("updated（更新后） ：在由于数据更改导致的虚拟 DOM 重新渲染和 打补丁之后调用。此时 DOM 已经根据响应式数据的变化更新了。调 用时，组件 DOM 已经更新，所以可以执行依赖于 DOM 的操作. 然而 在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更 新无限循环。该钩子在服务器端渲染期间不被调用。")])]),e._v(" "),v("li",[v("p",[e._v("beforeDestroy（销毁前）：实例销毁之前调用。这一步，实例仍 然完全可用，this 仍能获取到实例。")])]),e._v(" "),v("li",[v("p",[e._v("destroyed（销毁后）：实例销毁后调用，调用后，Vue 实例指示 的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例 也会被销毁。该钩子在服务端渲染期间不被调用。")])]),e._v(" "),v("li",[v("p",[e._v("另外还有 keep-alive 独有的生命周期，分别为 activated 和 deactivated。用 keep-alive 包裹的组件在切换时不会进行销毁，而 是缓存到内存中并执行 deactivated 钩子函数，命中缓存渲染后会执 行 activated 钩子函数")])])]),e._v(" "),v("h3",{attrs:{id:"vue子组件和父组件执行顺序"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue子组件和父组件执行顺序"}},[e._v("#")]),e._v(" Vue子组件和父组件执行顺序")]),e._v(" "),v("p",[e._v("加载渲染过程：")]),e._v(" "),v("ol",[v("li",[e._v("父组件 beforeCreate")]),e._v(" "),v("li",[e._v("父组件 created")]),e._v(" "),v("li",[e._v("父组件 beforeMount")]),e._v(" "),v("li",[e._v("子组件 beforeCreate")]),e._v(" "),v("li",[e._v("子组件 created")]),e._v(" "),v("li",[e._v("子组件 beforeMount")]),e._v(" "),v("li",[e._v("子组件 mounted")]),e._v(" "),v("li",[e._v("父组件 mounted")])]),e._v(" "),v("p",[e._v("更新过程：")]),e._v(" "),v("ol",[v("li",[e._v("父组件 beforeUpdat")]),e._v(" "),v("li",[e._v("子组件 beforeUpdate")]),e._v(" "),v("li",[e._v("子组件 updated")]),e._v(" "),v("li",[e._v("父组件 updated")])]),e._v(" "),v("p",[e._v("销毁过程：")]),e._v(" "),v("ol",[v("li",[e._v("父组件 beforeDestroy")]),e._v(" "),v("li",[e._v("子组件 beforeDestroy")]),e._v(" "),v("li",[e._v("子组件 destroyed")]),e._v(" "),v("li",[e._v("父组件 destoryed")])])])}),[],!1,null,null,null);t.default=a.exports}}]);