(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{434:function(t,s,a){"use strict";a.r(s);var e=a(56),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"assets和static的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#assets和static的区别"}},[t._v("#")]),t._v(" assets和static的区别")]),t._v(" "),a("h3",{attrs:{id:"相同点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相同点"}},[t._v("#")]),t._v(" 相同点")]),t._v(" "),a("p",[t._v("assets 和 static 两个都是存放静态资源文件。。项目中所 需要的资源文件图片，字体图标，样式文件等都可以放在这两个文件 下，这是相同点")]),t._v(" "),a("h3",{attrs:{id:"不相同点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不相同点"}},[t._v("#")]),t._v(" 不相同点")]),t._v(" "),a("p",[t._v("assets 中存放的静态资源文件在项目打包时，也就是运 行 npm run build 时会将 assets 中放置的静态资源文件进行打包 上传，所谓打包简单点可以理解为压缩体积，代码格式化。而压缩后 的静态资源文件最终也都会放置在 static 文件中跟着 index.html 一同上传至服务器。")]),t._v(" "),a("p",[t._v("static 中放置的静态资源文件就不会要走打包 压缩格式化等流程，而是直接进入打包好的目录，直接上传至服务器。因为避免了压缩直接进行上传，在打包时会提高一定的效率，但是 static 中的资源文件由于没有进行压缩等操作，所以文件的体积也 就相对于 assets 中打包后的文件提交较大点。在服务器中就会占据 更大的空间。")]),t._v(" "),a("h3",{attrs:{id:"使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[t._v("#")]),t._v(" 使用")]),t._v(" "),a("p",[t._v("将项目中 template 需要的样式文件 js 文件等都可以放置在 assets 中，走打包这一流程。减少体积。")]),t._v(" "),a("p",[t._v("而项目中引入的第三方的 资源文件如 iconfoont.css 等文件可以放置在 static 中，因为这 些引入的第三方文件已经经过处理，不再需要处理，直接上传。")])])}),[],!1,null,null,null);s.default=r.exports}}]);