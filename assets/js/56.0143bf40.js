(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{455:function(t,v,e){"use strict";e.r(v);var r=e(56),a=Object(r.a)({},(function(){var t=this,v=t.$createElement,e=t._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"vue组件间的通信"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue组件间的通信"}},[t._v("#")]),t._v(" Vue组件间的通信")]),t._v(" "),e("p",[t._v("可以分为：")]),t._v(" "),e("ul",[e("li",[t._v("父子组件之间的通信")]),t._v(" "),e("li",[t._v("兄弟组件之间的通信")]),t._v(" "),e("li",[t._v("祖孙后代之间的通信")]),t._v(" "),e("li",[t._v("非关系组件之间的通信")])]),t._v(" "),e("h3",{attrs:{id:"方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方案"}},[t._v("#")]),t._v(" 方案")]),t._v(" "),e("ol",[e("li",[t._v("通过 props 传递")]),t._v(" "),e("li",[t._v("通过 $emit 自定义事件。")]),t._v(" "),e("li",[t._v("使用 ref")]),t._v(" "),e("li",[t._v("EventBus")]),t._v(" "),e("li",[t._v("$parent 或 $root")]),t._v(" "),e("li",[t._v("attrs 与 listeners")]),t._v(" "),e("li",[t._v("provide 与 inject")]),t._v(" "),e("li",[t._v("vuex")])]),t._v(" "),e("h3",{attrs:{id:"props"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#props"}},[t._v("#")]),t._v(" props")]),t._v(" "),e("p",[t._v("父组件传递数据给子组件， 子组件设置 props 属性，来接收父组件传递来的参数。\n在子组件标签中通过字面量来传值。")]),t._v(" "),e("h3",{attrs:{id:"emit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#emit"}},[t._v("#")]),t._v(" $emit")]),t._v(" "),e("p",[t._v("子组件传递数据给父组件")]),t._v(" "),e("p",[t._v("子组件通过 $emit 自定义事件。 $emit 第二个参数为传递的数值。")]),t._v(" "),e("p",[t._v("父组件通过绑定监听器来获取子组件传递过来的参数。")]),t._v(" "),e("h3",{attrs:{id:"ref"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ref"}},[t._v("#")]),t._v(" ref")]),t._v(" "),e("p",[t._v("父组件使用子组合的时候设置 ref。\n父组件通过设置 子组件 ref 来获取数据。")]),t._v(" "),e("h3",{attrs:{id:"eventbus"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#eventbus"}},[t._v("#")]),t._v(" EventBus")]),t._v(" "),e("p",[t._v("兄弟组件传值。")]),t._v(" "),e("p",[t._v("创建一个中央事件总线 EventBus")]),t._v(" "),e("p",[t._v("兄弟组件通过 $emit 触发自定义事件。")]),t._v(" "),e("p",[t._v("另一个兄弟通过 $on 监听自定义事件。")]),t._v(" "),e("h3",{attrs:{id:"parent"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#parent"}},[t._v("#")]),t._v(" $parent")]),t._v(" "),e("p",[t._v("通过 $parent 搭建通信桥梁。")]),t._v(" "),e("p",[t._v("this.$parent.on('add', this.add);")]),t._v(" "),e("p",[t._v("this.$parent.emit('add');")]),t._v(" "),e("h3",{attrs:{id:"attrs-与-listeners"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#attrs-与-listeners"}},[t._v("#")]),t._v(" attrs 与 $listeners")]),t._v(" "),e("p",[t._v("祖先传递数据给子孙。\n批量向下传递属性 $attrs 和 $listeners")]),t._v(" "),e("p",[t._v("包含了父级作用域中不作为 prop 被识别的特性绑定。 class 和 style 除外。")]),t._v(" "),e("p",[t._v('可以通过 v-bind="$attrs" 传入内部组件。')]),t._v(" "),e("h3",{attrs:{id:"provide-与-inject"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#provide-与-inject"}},[t._v("#")]),t._v(" provide 与 inject")]),t._v(" "),e("p",[t._v("祖先组件定义 provide 属性。 返回传递的值。")]),t._v(" "),e("p",[t._v("后代组件通过 inject 接收传递的值。")]),t._v(" "),e("h3",{attrs:{id:"vuex"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vuex"}},[t._v("#")]),t._v(" vuex")]),t._v(" "),e("p",[t._v("适用于 复杂关系的组件数据传递。")]),t._v(" "),e("p",[t._v("用来存储共享变量的容器.")])])}),[],!1,null,null,null);v.default=a.exports}}]);